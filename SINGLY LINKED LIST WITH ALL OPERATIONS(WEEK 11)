#include<stdio.h>
#include<conio.h>
#include<process.h>
#include<stdlib.h>
struct node{
	int info;
	struct node *link;
};
typedef struct node *NODE;
NODE getnode()
{
	NODE x;
	x=(NODE)malloc(sizeof(struct node));
	if(x==NULL)
	{
		printf("MEMORY IS FULL\n");
		exit(0);
	}
	else
	return x;
}
NODE insertfront(NODE first,int item)
{
	NODE temp;
	temp=getnode();
	temp->info=item;
	temp->link=NULL;
	if(first==NULL)
	{
		return temp;
	}
	temp->link=first;
	first=temp;
	return first;
}
NODE insertrear(NODE first,int item)
{
	NODE temp,cur;
	temp=getnode();
	temp->info=item;
	temp->link=NULL;
	if(first==NULL)
	{
		return temp;
	}
	cur=first;
	while(cur->link != NULL)
	{
		cur=cur->link;
	}
	cur->link=temp;
	return first;
}

NODE insertpos(int item,int pos,NODE first)
{
NODE temp,cur,prev;
int count;
temp=getnode();
temp->info=item;
temp->link=NULL;
if(first==NULL&&pos==1)
{
return temp;
}
if(first==NULL)
{
printf("invalid position\n");
return first;
}
if(pos==1)
{
temp->link=first;
first=temp;
return temp;
}
count=1;
prev=NULL;
cur=first;
while(cur!=NULL&&count!=pos)
{
prev=cur;
cur=cur->link;
count++;
}
if(count==pos)
{

prev->link=temp;
temp->link=cur;
return first;
}
printf("invalid position\n");
return first;
}

NODE deletefront(NODE first)
{
	NODE cur;
	if(first==NULL)
	{
		printf("THE LINKED LIST IS EMPTY\n");
		return first;
	}
	cur=first;
	cur=cur->link;
	printf("THE DELETED ITEM FROM FRONT IS=%d\n",first->info);
	free(first);
	return cur;
}
NODE deleterear(NODE first)
{
	NODE prev,cur;
	if(first==NULL)
	{
		printf("THE LINKED LIST IS EMPTY\n");
		return first;
	}
	if(first->link==NULL)
	{
		printf("ITEM DELETED IS=%d\n",first->info);
		free(first);
		return NULL;
	}
	prev=NULL;
	cur=first;
	while(cur->link!=NULL)
	{
		prev=cur;
		cur=cur->link;
	}
	printf("THE DELETED ITEM FROM REAR IS=%d\n",cur->info);
	free(cur);
	prev->link=NULL;
	return first;
}
NODE deletepos(NODE first,int pos)
{
	NODE prev,cur;
	NODE temp;
	int count;
	if(first==NULL)
	{
		printf("THE LINKED LIST IS EMPTY\n");
		return NULL;
	}
	if(pos==1)
	{
		temp=first;
		printf("THE DELETED ITEM FROM POS 1 IS=%d\n",temp->info);
		free(temp);
	    first=first->link;
	    return first;
	}
	count=1;
	prev=NULL;
	cur=first;
	while(cur!=NULL && count!=pos)
	{
		prev=cur;
		cur=cur->link;
		count++;
	}
	if(count==pos)
	{
		printf("THE DELETED ITEM AT POSITION %d=%d\n",pos,cur->info);
		prev->link=cur->link;
		free(cur);
		return first;
	}
		printf("INVALID CHOICE\n");
		return first;
}
NODE reverse(NODE first)
{
	NODE cur,temp;
	cur=NULL;
	while(first!=NULL)
	{
		temp=first;
		first=first->link;
		temp->link=cur;
		cur=temp;
	}
	return cur;
}
NODE concat(NODE first,NODE second)
{
	NODE cur;
	if(first==NULL)
	return second;
	if(second==NULL)
	return first;
	cur=first;
	while(cur->link!=NULL)
	{
		cur=cur->link;
	}
	cur->link=second;
	return first;
}
NODE sort(NODE first)
{
    int swapped;
    NODE ptr1;
    NODE lptr = NULL; 
    if (first == NULL)
        return NULL;
    do
    {
        swapped = 0;
        ptr1 = first;

        while (ptr1->link != lptr)
        {
            if (ptr1->info > ptr1->link->info)
            {
                
                int tem = ptr1->info;
                ptr1->info = ptr1->link->info;
                ptr1->link->info = tem;
                    swapped = 1;
            }
            ptr1 = ptr1->link;
        }
        lptr = ptr1;
    } while (swapped);
    return first;
}

void display(NODE first)
{
	NODE temp;
	if(first==NULL){
		printf("THE LIST IS EMPTY\n");
	}
	printf("THE ELEMENTS ARE=");
	for(temp=first;temp!=NULL;temp=temp->link)
	{
		printf("%d\t",temp->info);
	}
	printf("\n");
}
int main()
{
	int c,item,pos;
	int n,i;
	int choice;
	NODE first=NULL,sec,fir;
	for(;;)
	{
		printf("1-INSERTFRONT \n 2-INSERTREAR \n 3-INSERT AT GIVEN POSITION \n 4-DELETEFRONT \n 5-DELETEREAR \n 6-DELETEPOS \n 7-CONCATENATION \n 8-REVERSING\n 9-SORTING \n 10-STACK \n 11-QUEUE 12-DISPLAY \n 13-EXIT");
		printf("ENTER THE CHOICE\n");
		scanf("%d",&c);
		switch(c)
		{
			case 1:
			printf("ENTER THE ELEMENT TO BE INSERTED FRONT\n");
			scanf("%d",&item);
			first=insertfront(first,item);
			break;
			case 2:
			printf("ENTER THE ELEMENT TO BE INSERTED AT THE END\n");
			scanf("%d",&item);
			first=insertrear(first,item);
			break;
              case 3:
              printf("ENTER THE ELEMENT AND THE POS AT WHICH IT SHOULD BE INSERTED\n");
			scanf("%d",&item);
			scanf("%d",&pos);
			first=insertpos(item,pos,first);
			break;
			case 4:
			first=deletefront(first);
			break;
			case 5:
			first=deleterear(first);
			break;
			case 6:
			printf("ENTER  THE POS AT WHICH ELEMENT SHOULD BE DELETED\n");
			scanf("%d",&pos);
			first=deletepos(first,pos);
			break;
			case 7:
			printf("ENTER THE NUMBER OF NODES IN FIRST LIST\n");
			scanf("%d",&n);
			fir=NULL;
			for(i=0;i<n;i++)
			{
				printf("ENTER THE ITEM TO BE INSERTED\n");
				scanf("%d",&item);
				fir=insertrear(fir,item);
			}
			printf("ENTER THE NUMBER OF NODES IN SECOND LIST\n");
			scanf("%d",&n);
			sec=NULL;
			for(i=0;i<n;i++)
			{
				printf("ENTER THE ITEM TO BE INSERTED\n");
				scanf("%d",&item);
				sec=insertrear(sec,item);
			}
			  fir=concat(fir,sec);
				display(fir);
				break;	
			case 8:
			first=reverse(first);
			printf("THE REVERSED LIST IS\n");
			display(first);
			break;	
			case 9:
			first=sort(first);
			display(first);
			break;	
			case 10:
			printf("Stack\n");
      for(;;)
      {
        printf("\n 1:Insert_rear\n 2:Delete_rear\n 3:Display_list\n 4:Exit\n");
        printf("Enter the choice\n");
        scanf("%d",&choice);
        switch(choice)
        {
        case 1:printf("Enter the item at rear-end\n");
            scanf("%d",&item);
            first=insertrear(first,item);
            break;
        case 2:first=deleterear(first);
            break;
        case 3:display(first);
            break;
        default:exit(0);
      }
  }
          break;
          case 11:
          printf("QUEUE\n");
        for(;;)
        {
            printf("\n 1:Insert_rear\n 2:Delete_front\n 3:Display_list\n 4:Exit\n");
            printf("Enter the choice\n");
            scanf("%d",&choice);
            switch(choice)
            { 
            case 1:printf("Enter the item at rear-end\n");
                    scanf("%d",&item);
                    first=insertrear(first,item);
                    break;
            case 2:first=deletefront(first);
                    break;
            case 3:display(first);
                    break;
            default:exit(0);
                    break;
            }
        }
        break;   						
            case 12:
            display(first);
            break;
            case 13:
             exit(0);
         default:
         printf("INVALID CHOICE\n");
	 }
 }
}




	
	
